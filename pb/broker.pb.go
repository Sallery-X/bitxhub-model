// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: broker.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_meshplus_bitxhub_kit_types "github.com/meshplus/bitxhub-kit/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetBlockRequest_Type int32

const (
	GetBlockRequest_HEIGHT GetBlockRequest_Type = 0
	GetBlockRequest_HASH   GetBlockRequest_Type = 1
)

var GetBlockRequest_Type_name = map[int32]string{
	0: "HEIGHT",
	1: "HASH",
}

var GetBlockRequest_Type_value = map[string]int32{
	"HEIGHT": 0,
	"HASH":   1,
}

func (x GetBlockRequest_Type) String() string {
	return proto.EnumName(GetBlockRequest_Type_name, int32(x))
}

func (GetBlockRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{2, 0}
}

type SubscriptionRequest_Type int32

const (
	SubscriptionRequest_BLOCK         SubscriptionRequest_Type = 0
	SubscriptionRequest_EVENT         SubscriptionRequest_Type = 1
	SubscriptionRequest_INTERCHAIN_TX SubscriptionRequest_Type = 2
	SubscriptionRequest_BLOCK_HEADER  SubscriptionRequest_Type = 3
)

var SubscriptionRequest_Type_name = map[int32]string{
	0: "BLOCK",
	1: "EVENT",
	2: "INTERCHAIN_TX",
	3: "BLOCK_HEADER",
}

var SubscriptionRequest_Type_value = map[string]int32{
	"BLOCK":         0,
	"EVENT":         1,
	"INTERCHAIN_TX": 2,
	"BLOCK_HEADER":  3,
}

func (x SubscriptionRequest_Type) String() string {
	return proto.EnumName(SubscriptionRequest_Type_name, int32(x))
}

func (SubscriptionRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{10, 0}
}

type GetMerkleWrapperRequest struct {
	Begin                uint64   `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End                  uint64   `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Pid                  string   `protobuf:"bytes,3,opt,name=pid,proto3" json:"pid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMerkleWrapperRequest) Reset()         { *m = GetMerkleWrapperRequest{} }
func (m *GetMerkleWrapperRequest) String() string { return proto.CompactTextString(m) }
func (*GetMerkleWrapperRequest) ProtoMessage()    {}
func (*GetMerkleWrapperRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{0}
}
func (m *GetMerkleWrapperRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMerkleWrapperRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMerkleWrapperRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMerkleWrapperRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMerkleWrapperRequest.Merge(m, src)
}
func (m *GetMerkleWrapperRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMerkleWrapperRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMerkleWrapperRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMerkleWrapperRequest proto.InternalMessageInfo

func (m *GetMerkleWrapperRequest) GetBegin() uint64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *GetMerkleWrapperRequest) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *GetMerkleWrapperRequest) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

type TransactionHashMsg struct {
	TxHash               string   `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionHashMsg) Reset()         { *m = TransactionHashMsg{} }
func (m *TransactionHashMsg) String() string { return proto.CompactTextString(m) }
func (*TransactionHashMsg) ProtoMessage()    {}
func (*TransactionHashMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{1}
}
func (m *TransactionHashMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionHashMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionHashMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionHashMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionHashMsg.Merge(m, src)
}
func (m *TransactionHashMsg) XXX_Size() int {
	return m.Size()
}
func (m *TransactionHashMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionHashMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionHashMsg proto.InternalMessageInfo

func (m *TransactionHashMsg) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type GetBlockRequest struct {
	Type                 GetBlockRequest_Type `protobuf:"varint,1,opt,name=type,proto3,enum=pb.GetBlockRequest_Type" json:"type,omitempty"`
	Value                string               `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetBlockRequest) Reset()         { *m = GetBlockRequest{} }
func (m *GetBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockRequest) ProtoMessage()    {}
func (*GetBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{2}
}
func (m *GetBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockRequest.Merge(m, src)
}
func (m *GetBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockRequest proto.InternalMessageInfo

func (m *GetBlockRequest) GetType() GetBlockRequest_Type {
	if m != nil {
		return m.Type
	}
	return GetBlockRequest_HEIGHT
}

func (m *GetBlockRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Request struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{3}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

type Response struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{4}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Address struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{5}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type SendTransactionRequest struct {
	Version              []byte                                        `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	From                 github_com_meshplus_bitxhub_kit_types.Address `protobuf:"bytes,2,opt,name=from,proto3,customtype=github.com/meshplus/bitxhub-kit/types.Address" json:"from"`
	To                   github_com_meshplus_bitxhub_kit_types.Address `protobuf:"bytes,3,opt,name=to,proto3,customtype=github.com/meshplus/bitxhub-kit/types.Address" json:"to"`
	Timestamp            int64                                         `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data                 *TransactionData                              `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Nonce                int64                                         `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Signature            []byte                                        `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
	Extra                []byte                                        `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *SendTransactionRequest) Reset()         { *m = SendTransactionRequest{} }
func (m *SendTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*SendTransactionRequest) ProtoMessage()    {}
func (*SendTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{6}
}
func (m *SendTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTransactionRequest.Merge(m, src)
}
func (m *SendTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendTransactionRequest proto.InternalMessageInfo

func (m *SendTransactionRequest) GetVersion() []byte {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *SendTransactionRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SendTransactionRequest) GetData() *TransactionData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SendTransactionRequest) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *SendTransactionRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SendTransactionRequest) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

type SyncMerkleWrapperRequest struct {
	AppchainId           string   `protobuf:"bytes,1,opt,name=appchain_id,json=appchainId,proto3" json:"appchain_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncMerkleWrapperRequest) Reset()         { *m = SyncMerkleWrapperRequest{} }
func (m *SyncMerkleWrapperRequest) String() string { return proto.CompactTextString(m) }
func (*SyncMerkleWrapperRequest) ProtoMessage()    {}
func (*SyncMerkleWrapperRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{7}
}
func (m *SyncMerkleWrapperRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncMerkleWrapperRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncMerkleWrapperRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncMerkleWrapperRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncMerkleWrapperRequest.Merge(m, src)
}
func (m *SyncMerkleWrapperRequest) XXX_Size() int {
	return m.Size()
}
func (m *SyncMerkleWrapperRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncMerkleWrapperRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncMerkleWrapperRequest proto.InternalMessageInfo

func (m *SyncMerkleWrapperRequest) GetAppchainId() string {
	if m != nil {
		return m.AppchainId
	}
	return ""
}

type GetBlocksRequest struct {
	Offset               uint64   `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Length               uint64   `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBlocksRequest) Reset()         { *m = GetBlocksRequest{} }
func (m *GetBlocksRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlocksRequest) ProtoMessage()    {}
func (*GetBlocksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{8}
}
func (m *GetBlocksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlocksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlocksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlocksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlocksRequest.Merge(m, src)
}
func (m *GetBlocksRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBlocksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlocksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlocksRequest proto.InternalMessageInfo

func (m *GetBlocksRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetBlocksRequest) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

type GetBlocksResponse struct {
	Blocks               []*Block `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBlocksResponse) Reset()         { *m = GetBlocksResponse{} }
func (m *GetBlocksResponse) String() string { return proto.CompactTextString(m) }
func (*GetBlocksResponse) ProtoMessage()    {}
func (*GetBlocksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{9}
}
func (m *GetBlocksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlocksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlocksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlocksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlocksResponse.Merge(m, src)
}
func (m *GetBlocksResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBlocksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlocksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlocksResponse proto.InternalMessageInfo

func (m *GetBlocksResponse) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type SubscriptionRequest struct {
	Type                 SubscriptionRequest_Type `protobuf:"varint,1,opt,name=type,proto3,enum=pb.SubscriptionRequest_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *SubscriptionRequest) Reset()         { *m = SubscriptionRequest{} }
func (m *SubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*SubscriptionRequest) ProtoMessage()    {}
func (*SubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{10}
}
func (m *SubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionRequest.Merge(m, src)
}
func (m *SubscriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionRequest proto.InternalMessageInfo

func (m *SubscriptionRequest) GetType() SubscriptionRequest_Type {
	if m != nil {
		return m.Type
	}
	return SubscriptionRequest_BLOCK
}

type GetTransactionResponse struct {
	Tx                   *Transaction     `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	TxMeta               *TransactionMeta `protobuf:"bytes,2,opt,name=tx_meta,json=txMeta,proto3" json:"tx_meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetTransactionResponse) Reset()         { *m = GetTransactionResponse{} }
func (m *GetTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*GetTransactionResponse) ProtoMessage()    {}
func (*GetTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{11}
}
func (m *GetTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionResponse.Merge(m, src)
}
func (m *GetTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionResponse proto.InternalMessageInfo

func (m *GetTransactionResponse) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *GetTransactionResponse) GetTxMeta() *TransactionMeta {
	if m != nil {
		return m.TxMeta
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.GetBlockRequest_Type", GetBlockRequest_Type_name, GetBlockRequest_Type_value)
	proto.RegisterEnum("pb.SubscriptionRequest_Type", SubscriptionRequest_Type_name, SubscriptionRequest_Type_value)
	proto.RegisterType((*GetMerkleWrapperRequest)(nil), "pb.GetMerkleWrapperRequest")
	proto.RegisterType((*TransactionHashMsg)(nil), "pb.TransactionHashMsg")
	proto.RegisterType((*GetBlockRequest)(nil), "pb.GetBlockRequest")
	proto.RegisterType((*Request)(nil), "pb.Request")
	proto.RegisterType((*Response)(nil), "pb.Response")
	proto.RegisterType((*Address)(nil), "pb.Address")
	proto.RegisterType((*SendTransactionRequest)(nil), "pb.SendTransactionRequest")
	proto.RegisterType((*SyncMerkleWrapperRequest)(nil), "pb.SyncMerkleWrapperRequest")
	proto.RegisterType((*GetBlocksRequest)(nil), "pb.GetBlocksRequest")
	proto.RegisterType((*GetBlocksResponse)(nil), "pb.GetBlocksResponse")
	proto.RegisterType((*SubscriptionRequest)(nil), "pb.SubscriptionRequest")
	proto.RegisterType((*GetTransactionResponse)(nil), "pb.GetTransactionResponse")
}

func init() { proto.RegisterFile("broker.proto", fileDescriptor_f209535e190f2bed) }

var fileDescriptor_f209535e190f2bed = []byte{
	// 1096 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcf, 0x4e, 0x23, 0x47,
	0x13, 0x67, 0x8c, 0xd7, 0xc6, 0x65, 0x03, 0xa6, 0x60, 0x61, 0xd6, 0xcb, 0x62, 0x76, 0x3e, 0x7d,
	0x0a, 0x8a, 0x16, 0x9b, 0x10, 0x25, 0x87, 0x44, 0x91, 0x62, 0xb3, 0x96, 0x8d, 0xb2, 0x90, 0x68,
	0xec, 0x6c, 0x22, 0xe5, 0x60, 0xf5, 0xd8, 0xcd, 0x78, 0x84, 0x3d, 0x33, 0x99, 0x6e, 0xb3, 0x46,
	0xab, 0xbd, 0xe4, 0x98, 0x6b, 0x9e, 0x24, 0x6f, 0xb1, 0xc7, 0x48, 0x51, 0x2e, 0x39, 0xac, 0x22,
	0x94, 0x07, 0x89, 0xba, 0xa6, 0x07, 0x6c, 0x03, 0xab, 0x28, 0x27, 0x77, 0x55, 0x57, 0xfd, 0xea,
	0x4f, 0xff, 0xaa, 0xc6, 0x50, 0x70, 0xa2, 0xe0, 0x9c, 0x47, 0x95, 0x30, 0x0a, 0x64, 0x80, 0xa9,
	0xd0, 0x29, 0xed, 0xbb, 0x9e, 0x1c, 0x8c, 0x9d, 0x4a, 0x2f, 0x18, 0x55, 0xdd, 0xc0, 0x0d, 0xaa,
	0x74, 0xe5, 0x8c, 0xcf, 0x48, 0x22, 0x81, 0x4e, 0xb1, 0x4b, 0x69, 0xdb, 0x0d, 0x02, 0x77, 0xc8,
	0xab, 0x2c, 0xf4, 0xaa, 0xcc, 0xf7, 0x03, 0xc9, 0xa4, 0x17, 0xf8, 0x42, 0xdf, 0xae, 0xc9, 0x88,
	0xf9, 0x82, 0xf5, 0x94, 0x4e, 0xab, 0x96, 0x23, 0xde, 0xe3, 0x5e, 0x28, 0xb5, 0x98, 0x77, 0x86,
	0x41, 0xef, 0x3c, 0x11, 0x7a, 0x03, 0xe6, 0x69, 0x43, 0xab, 0x0d, 0x5b, 0x4d, 0x2e, 0x4f, 0x78,
	0x74, 0x3e, 0xe4, 0xdf, 0x45, 0x2c, 0x0c, 0x79, 0x64, 0xf3, 0x1f, 0xc7, 0x5c, 0x48, 0xdc, 0x80,
	0x07, 0x0e, 0x77, 0x3d, 0xdf, 0x34, 0x76, 0x8d, 0xbd, 0xb4, 0x1d, 0x0b, 0x58, 0x84, 0x45, 0xee,
	0xf7, 0xcd, 0x14, 0xe9, 0xd4, 0x51, 0x69, 0x42, 0xaf, 0x6f, 0x2e, 0xee, 0x1a, 0x7b, 0x39, 0x5b,
	0x1d, 0xad, 0x7d, 0xc0, 0xce, 0x4d, 0x4a, 0x2d, 0x26, 0x06, 0x27, 0xc2, 0xc5, 0x2d, 0xc8, 0xca,
	0x49, 0x77, 0xc0, 0xc4, 0x80, 0x10, 0x73, 0x76, 0x46, 0x4e, 0xd4, 0x9d, 0x25, 0x60, 0xb5, 0xc9,
	0x65, 0x5d, 0xa5, 0x98, 0xc4, 0x7e, 0x06, 0x69, 0x79, 0x19, 0x72, 0x32, 0x5c, 0x39, 0x34, 0x2b,
	0xa1, 0x53, 0x99, 0x33, 0xa9, 0x74, 0x2e, 0x43, 0x6e, 0x93, 0x95, 0xca, 0xf4, 0x82, 0x0d, 0xc7,
	0x9c, 0xb2, 0xca, 0xd9, 0xb1, 0x60, 0x6d, 0x43, 0x5a, 0xd9, 0x20, 0x40, 0xa6, 0xd5, 0x38, 0x6e,
	0xb6, 0x3a, 0xc5, 0x05, 0x5c, 0x82, 0x74, 0xab, 0xd6, 0x6e, 0x15, 0x0d, 0x2b, 0x07, 0x59, 0x8d,
	0x64, 0xed, 0xc0, 0x92, 0xcd, 0x45, 0x18, 0xf8, 0x82, 0x23, 0x42, 0xba, 0xcf, 0x24, 0xa3, 0xc0,
	0x05, 0x9b, 0xce, 0xd6, 0xff, 0x20, 0x5b, 0xeb, 0xf7, 0x23, 0x2e, 0x04, 0x9a, 0x90, 0x65, 0xf1,
	0x51, 0xd7, 0x90, 0x88, 0xd6, 0x1f, 0x29, 0xd8, 0x6c, 0x73, 0xbf, 0x3f, 0x55, 0x78, 0x52, 0x8c,
	0x09, 0xd9, 0x0b, 0x1e, 0x09, 0x2f, 0xf0, 0x35, 0x6c, 0x22, 0xe2, 0x31, 0xa4, 0xcf, 0xa2, 0x60,
	0x44, 0x79, 0x17, 0xea, 0x9f, 0xbc, 0x7d, 0x57, 0x5e, 0xf8, 0xf3, 0x5d, 0x79, 0x9a, 0x1c, 0x23,
	0x2e, 0x06, 0xe1, 0x70, 0x2c, 0xaa, 0x8e, 0x27, 0x27, 0x83, 0xb1, 0xb3, 0x7f, 0xee, 0xc9, 0xaa,
	0x2a, 0x5a, 0x54, 0x74, 0x4e, 0x36, 0x41, 0x60, 0x03, 0x52, 0x32, 0xa0, 0x47, 0xf8, 0xcf, 0x40,
	0x29, 0x19, 0xe0, 0x36, 0xe4, 0xa4, 0x37, 0xe2, 0x42, 0xb2, 0x51, 0x68, 0xa6, 0x77, 0x8d, 0xbd,
	0x45, 0xfb, 0x46, 0x81, 0x1f, 0xe8, 0xee, 0x64, 0x76, 0x8d, 0xbd, 0xfc, 0xe1, 0xba, 0x7a, 0x96,
	0xa9, 0x7a, 0x9f, 0x33, 0xc9, 0xe2, 0x96, 0xa9, 0x17, 0xf1, 0x03, 0xbf, 0xc7, 0xcd, 0x2c, 0x41,
	0xc4, 0x82, 0x02, 0x17, 0x9e, 0xeb, 0x33, 0x39, 0x8e, 0xb8, 0xb9, 0x44, 0xad, 0xb8, 0x51, 0x28,
	0x1f, 0x3e, 0x91, 0x11, 0x33, 0x73, 0x74, 0x13, 0x0b, 0xd6, 0xe7, 0x60, 0xb6, 0x2f, 0xfd, 0xde,
	0x9d, 0x0c, 0x2d, 0x43, 0x9e, 0x85, 0x21, 0xd1, 0xb9, 0xeb, 0xf5, 0xf5, 0x8b, 0x40, 0xa2, 0x3a,
	0xee, 0x5b, 0x75, 0x28, 0x26, 0xb4, 0x11, 0x89, 0xd3, 0x26, 0x64, 0x82, 0xb3, 0x33, 0xc1, 0xa5,
	0xe6, 0xb5, 0x96, 0x94, 0x7e, 0xc8, 0x7d, 0x57, 0x0e, 0x34, 0xb7, 0xb5, 0x64, 0x7d, 0x0a, 0x6b,
	0x53, 0x18, 0x9a, 0x26, 0x4f, 0x21, 0x43, 0x23, 0xa5, 0x68, 0xb0, 0xb8, 0x97, 0x3f, 0xcc, 0xa9,
	0x56, 0xc4, 0xf4, 0xd4, 0x17, 0xd6, 0xcf, 0x06, 0xac, 0xb7, 0xc7, 0x8e, 0xe8, 0x45, 0x5e, 0x38,
	0xcd, 0x86, 0x83, 0x19, 0x6a, 0x6f, 0x2b, 0xc7, 0x3b, 0xcc, 0xa6, 0xe8, 0x6d, 0xd5, 0x34, 0x91,
	0x73, 0xf0, 0xa0, 0xfe, 0xe2, 0xeb, 0xa3, 0xaf, 0x8a, 0x0b, 0xea, 0xd8, 0x78, 0xd9, 0x38, 0xed,
	0x14, 0x0d, 0x5c, 0x83, 0xe5, 0xe3, 0xd3, 0x4e, 0xc3, 0x3e, 0x6a, 0xd5, 0x8e, 0x4f, 0xbb, 0x9d,
	0xef, 0x8b, 0x29, 0x2c, 0x42, 0x81, 0x0c, 0xbb, 0xad, 0x46, 0xed, 0x79, 0xc3, 0x2e, 0x2e, 0x5a,
	0x2e, 0x6c, 0x36, 0xb9, 0x9c, 0xe1, 0xa6, 0xae, 0xa4, 0x0c, 0x29, 0x39, 0xa1, 0x64, 0xf2, 0x87,
	0xab, 0x73, 0x0f, 0x6a, 0xa7, 0xe4, 0x04, 0x9f, 0xd1, 0xd8, 0x8e, 0xb8, 0x64, 0xd4, 0x98, 0xdb,
	0xcf, 0x7e, 0xc2, 0x25, 0x53, 0xb3, 0xac, 0x7e, 0x0f, 0x7f, 0x5d, 0x82, 0xfc, 0x91, 0xea, 0x7e,
	0x9d, 0x56, 0x1e, 0x9e, 0x42, 0x4e, 0x57, 0xe7, 0x70, 0xdc, 0xba, 0xa7, 0xd8, 0x52, 0x41, 0x5d,
	0x24, 0x29, 0x59, 0xe6, 0x4f, 0xbf, 0xff, 0xfd, 0x4b, 0x0a, 0xb1, 0x58, 0xbd, 0xf8, 0xa8, 0x2a,
	0xa6, 0xcc, 0x0f, 0x0c, 0x74, 0x60, 0xed, 0x16, 0x1d, 0x30, 0x6e, 0xe2, 0x3d, 0x2c, 0x99, 0x03,
	0x2f, 0x13, 0xf8, 0x23, 0xdc, 0x22, 0xf0, 0x4b, 0xbf, 0xd7, 0x1d, 0x91, 0x53, 0xf7, 0x55, 0xec,
	0x75, 0x60, 0xe0, 0x0f, 0xc4, 0x9a, 0xd9, 0x10, 0x8f, 0xf5, 0x0a, 0xfa, 0x17, 0x11, 0x4a, 0x14,
	0x61, 0x03, 0x51, 0x45, 0xb8, 0x05, 0xce, 0x60, 0x75, 0x6e, 0x4d, 0x60, 0x89, 0xd2, 0xbf, 0x73,
	0x77, 0x94, 0x36, 0xe7, 0x9a, 0xad, 0x97, 0x69, 0x12, 0xc4, 0x5a, 0x55, 0x41, 0xa6, 0xf6, 0xff,
	0x67, 0xc6, 0x87, 0xe8, 0xc2, 0xca, 0xec, 0x63, 0xe3, 0x3d, 0x28, 0xa5, 0x92, 0xae, 0xea, 0x0e,
	0x62, 0x58, 0x4f, 0x29, 0xc2, 0x63, 0x7c, 0x34, 0x17, 0xa1, 0xfa, 0x5a, 0x6f, 0xf1, 0x37, 0xf8,
	0x0d, 0x40, 0x93, 0x4b, 0x3b, 0xfe, 0xd4, 0xdc, 0x1b, 0x24, 0x1f, 0x77, 0x87, 0x8c, 0xac, 0x27,
	0x84, 0xba, 0x85, 0x0f, 0x15, 0xaa, 0xfe, 0x48, 0x4d, 0x21, 0x7e, 0x01, 0x4b, 0xc9, 0xb0, 0xe1,
	0xfa, 0x1d, 0x5b, 0xbf, 0x74, 0x33, 0x68, 0xd6, 0x1a, 0x41, 0xe5, 0x31, 0xa7, 0xa0, 0x68, 0xe8,
	0xf0, 0x05, 0xe4, 0xae, 0x67, 0x15, 0x37, 0xa6, 0xfd, 0x93, 0xf1, 0x2f, 0x3d, 0x9c, 0xd3, 0xea,
	0x6a, 0x91, 0xc0, 0x0a, 0x08, 0xd7, 0x60, 0x02, 0xeb, 0x50, 0x68, 0x72, 0x49, 0x6c, 0x56, 0xdc,
	0x46, 0x5d, 0x48, 0x8c, 0xb3, 0xac, 0x84, 0xeb, 0x3b, 0x6b, 0x93, 0xfc, 0x8b, 0xb8, 0xa2, 0xfc,
	0xe3, 0x8d, 0xa4, 0x46, 0x06, 0x1b, 0xf4, 0x16, 0x64, 0xd7, 0x96, 0x4c, 0x8e, 0xc5, 0x2c, 0xca,
	0x7b, 0x88, 0x1f, 0x83, 0x88, 0xd8, 0xa9, 0x0e, 0xcb, 0x4d, 0x2e, 0x5f, 0xb2, 0xa1, 0xd7, 0x67,
	0x32, 0x88, 0xde, 0x8b, 0x32, 0x93, 0xca, 0xc5, 0x8d, 0xcb, 0x97, 0x94, 0xca, 0x29, 0x97, 0xaf,
	0x82, 0xe8, 0xfc, 0x76, 0x41, 0xb3, 0x20, 0xeb, 0x04, 0xb2, 0x8c, 0x79, 0x05, 0xe2, 0xc7, 0x3e,
	0xf8, 0x2d, 0xad, 0xc2, 0x5a, 0xaf, 0x17, 0x8c, 0x7d, 0x59, 0x67, 0x43, 0xa6, 0x96, 0x3a, 0x81,
	0xe8, 0x4f, 0xc8, 0x1c, 0xc8, 0xff, 0x09, 0xa4, 0x8c, 0x4f, 0x14, 0x08, 0x8b, 0xdd, 0xba, 0x4e,
	0xec, 0x57, 0x7d, 0xad, 0xbf, 0x9c, 0x6f, 0xea, 0x85, 0xb7, 0x57, 0x3b, 0xc6, 0x6f, 0x57, 0x3b,
	0xc6, 0x5f, 0x57, 0x3b, 0x86, 0x93, 0xa1, 0x3f, 0x26, 0x1f, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff,
	0xae, 0x9a, 0xe6, 0xf2, 0x35, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChainBrokerClient is the client API for ChainBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChainBrokerClient interface {
	Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (ChainBroker_SubscribeClient, error)
	// Pier sync merkle wrapper meta from bitxhub
	// Request includes the appchain id
	// Response includes MerkleWrapper struct
	SyncMerkleWrapper(ctx context.Context, in *SyncMerkleWrapperRequest, opts ...grpc.CallOption) (ChainBroker_SyncMerkleWrapperClient, error)
	GetMerkleWrapper(ctx context.Context, in *GetMerkleWrapperRequest, opts ...grpc.CallOption) (ChainBroker_GetMerkleWrapperClient, error)
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*TransactionHashMsg, error)
	GetTransaction(ctx context.Context, in *TransactionHashMsg, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	GetReceipt(ctx context.Context, in *TransactionHashMsg, opts ...grpc.CallOption) (*Receipt, error)
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*Block, error)
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error)
	GetChainMeta(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ChainMeta, error)
	GetChainStatus(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetValidators(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetNetworkMeta(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetAccountBalance(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Response, error)
}

type chainBrokerClient struct {
	cc *grpc.ClientConn
}

func NewChainBrokerClient(cc *grpc.ClientConn) ChainBrokerClient {
	return &chainBrokerClient{cc}
}

func (c *chainBrokerClient) Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (ChainBroker_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChainBroker_serviceDesc.Streams[0], "/pb.ChainBroker/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &chainBrokerSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChainBroker_SubscribeClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type chainBrokerSubscribeClient struct {
	grpc.ClientStream
}

func (x *chainBrokerSubscribeClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chainBrokerClient) SyncMerkleWrapper(ctx context.Context, in *SyncMerkleWrapperRequest, opts ...grpc.CallOption) (ChainBroker_SyncMerkleWrapperClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChainBroker_serviceDesc.Streams[1], "/pb.ChainBroker/SyncMerkleWrapper", opts...)
	if err != nil {
		return nil, err
	}
	x := &chainBrokerSyncMerkleWrapperClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChainBroker_SyncMerkleWrapperClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type chainBrokerSyncMerkleWrapperClient struct {
	grpc.ClientStream
}

func (x *chainBrokerSyncMerkleWrapperClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chainBrokerClient) GetMerkleWrapper(ctx context.Context, in *GetMerkleWrapperRequest, opts ...grpc.CallOption) (ChainBroker_GetMerkleWrapperClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChainBroker_serviceDesc.Streams[2], "/pb.ChainBroker/GetMerkleWrapper", opts...)
	if err != nil {
		return nil, err
	}
	x := &chainBrokerGetMerkleWrapperClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChainBroker_GetMerkleWrapperClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type chainBrokerGetMerkleWrapperClient struct {
	grpc.ClientStream
}

func (x *chainBrokerGetMerkleWrapperClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chainBrokerClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*TransactionHashMsg, error) {
	out := new(TransactionHashMsg)
	err := c.cc.Invoke(ctx, "/pb.ChainBroker/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainBrokerClient) GetTransaction(ctx context.Context, in *TransactionHashMsg, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, "/pb.ChainBroker/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainBrokerClient) GetReceipt(ctx context.Context, in *TransactionHashMsg, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/pb.ChainBroker/GetReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainBrokerClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/pb.ChainBroker/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainBrokerClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error) {
	out := new(GetBlocksResponse)
	err := c.cc.Invoke(ctx, "/pb.ChainBroker/GetBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainBrokerClient) GetChainMeta(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ChainMeta, error) {
	out := new(ChainMeta)
	err := c.cc.Invoke(ctx, "/pb.ChainBroker/GetChainMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainBrokerClient) GetChainStatus(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ChainBroker/GetChainStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainBrokerClient) GetValidators(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ChainBroker/GetValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainBrokerClient) GetNetworkMeta(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ChainBroker/GetNetworkMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainBrokerClient) GetAccountBalance(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ChainBroker/GetAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainBrokerServer is the server API for ChainBroker service.
type ChainBrokerServer interface {
	Subscribe(*SubscriptionRequest, ChainBroker_SubscribeServer) error
	// Pier sync merkle wrapper meta from bitxhub
	// Request includes the appchain id
	// Response includes MerkleWrapper struct
	SyncMerkleWrapper(*SyncMerkleWrapperRequest, ChainBroker_SyncMerkleWrapperServer) error
	GetMerkleWrapper(*GetMerkleWrapperRequest, ChainBroker_GetMerkleWrapperServer) error
	SendTransaction(context.Context, *SendTransactionRequest) (*TransactionHashMsg, error)
	GetTransaction(context.Context, *TransactionHashMsg) (*GetTransactionResponse, error)
	GetReceipt(context.Context, *TransactionHashMsg) (*Receipt, error)
	GetBlock(context.Context, *GetBlockRequest) (*Block, error)
	GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error)
	GetChainMeta(context.Context, *Request) (*ChainMeta, error)
	GetChainStatus(context.Context, *Request) (*Response, error)
	GetValidators(context.Context, *Request) (*Response, error)
	GetNetworkMeta(context.Context, *Request) (*Response, error)
	GetAccountBalance(context.Context, *Address) (*Response, error)
}

// UnimplementedChainBrokerServer can be embedded to have forward compatible implementations.
type UnimplementedChainBrokerServer struct {
}

func (*UnimplementedChainBrokerServer) Subscribe(req *SubscriptionRequest, srv ChainBroker_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedChainBrokerServer) SyncMerkleWrapper(req *SyncMerkleWrapperRequest, srv ChainBroker_SyncMerkleWrapperServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncMerkleWrapper not implemented")
}
func (*UnimplementedChainBrokerServer) GetMerkleWrapper(req *GetMerkleWrapperRequest, srv ChainBroker_GetMerkleWrapperServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMerkleWrapper not implemented")
}
func (*UnimplementedChainBrokerServer) SendTransaction(ctx context.Context, req *SendTransactionRequest) (*TransactionHashMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (*UnimplementedChainBrokerServer) GetTransaction(ctx context.Context, req *TransactionHashMsg) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (*UnimplementedChainBrokerServer) GetReceipt(ctx context.Context, req *TransactionHashMsg) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (*UnimplementedChainBrokerServer) GetBlock(ctx context.Context, req *GetBlockRequest) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedChainBrokerServer) GetBlocks(ctx context.Context, req *GetBlocksRequest) (*GetBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (*UnimplementedChainBrokerServer) GetChainMeta(ctx context.Context, req *Request) (*ChainMeta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainMeta not implemented")
}
func (*UnimplementedChainBrokerServer) GetChainStatus(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainStatus not implemented")
}
func (*UnimplementedChainBrokerServer) GetValidators(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidators not implemented")
}
func (*UnimplementedChainBrokerServer) GetNetworkMeta(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkMeta not implemented")
}
func (*UnimplementedChainBrokerServer) GetAccountBalance(ctx context.Context, req *Address) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalance not implemented")
}

func RegisterChainBrokerServer(s *grpc.Server, srv ChainBrokerServer) {
	s.RegisterService(&_ChainBroker_serviceDesc, srv)
}

func _ChainBroker_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChainBrokerServer).Subscribe(m, &chainBrokerSubscribeServer{stream})
}

type ChainBroker_SubscribeServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type chainBrokerSubscribeServer struct {
	grpc.ServerStream
}

func (x *chainBrokerSubscribeServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ChainBroker_SyncMerkleWrapper_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncMerkleWrapperRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChainBrokerServer).SyncMerkleWrapper(m, &chainBrokerSyncMerkleWrapperServer{stream})
}

type ChainBroker_SyncMerkleWrapperServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type chainBrokerSyncMerkleWrapperServer struct {
	grpc.ServerStream
}

func (x *chainBrokerSyncMerkleWrapperServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ChainBroker_GetMerkleWrapper_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMerkleWrapperRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChainBrokerServer).GetMerkleWrapper(m, &chainBrokerGetMerkleWrapperServer{stream})
}

type ChainBroker_GetMerkleWrapperServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type chainBrokerGetMerkleWrapperServer struct {
	grpc.ServerStream
}

func (x *chainBrokerGetMerkleWrapperServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ChainBroker_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainBrokerServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChainBroker/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainBrokerServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainBroker_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionHashMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainBrokerServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChainBroker/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainBrokerServer).GetTransaction(ctx, req.(*TransactionHashMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainBroker_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionHashMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainBrokerServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChainBroker/GetReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainBrokerServer).GetReceipt(ctx, req.(*TransactionHashMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainBroker_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainBrokerServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChainBroker/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainBrokerServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainBroker_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainBrokerServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChainBroker/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainBrokerServer).GetBlocks(ctx, req.(*GetBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainBroker_GetChainMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainBrokerServer).GetChainMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChainBroker/GetChainMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainBrokerServer).GetChainMeta(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainBroker_GetChainStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainBrokerServer).GetChainStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChainBroker/GetChainStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainBrokerServer).GetChainStatus(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainBroker_GetValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainBrokerServer).GetValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChainBroker/GetValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainBrokerServer).GetValidators(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainBroker_GetNetworkMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainBrokerServer).GetNetworkMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChainBroker/GetNetworkMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainBrokerServer).GetNetworkMeta(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainBroker_GetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainBrokerServer).GetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChainBroker/GetAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainBrokerServer).GetAccountBalance(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChainBroker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChainBroker",
	HandlerType: (*ChainBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTransaction",
			Handler:    _ChainBroker_SendTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _ChainBroker_GetTransaction_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _ChainBroker_GetReceipt_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _ChainBroker_GetBlock_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _ChainBroker_GetBlocks_Handler,
		},
		{
			MethodName: "GetChainMeta",
			Handler:    _ChainBroker_GetChainMeta_Handler,
		},
		{
			MethodName: "GetChainStatus",
			Handler:    _ChainBroker_GetChainStatus_Handler,
		},
		{
			MethodName: "GetValidators",
			Handler:    _ChainBroker_GetValidators_Handler,
		},
		{
			MethodName: "GetNetworkMeta",
			Handler:    _ChainBroker_GetNetworkMeta_Handler,
		},
		{
			MethodName: "GetAccountBalance",
			Handler:    _ChainBroker_GetAccountBalance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ChainBroker_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SyncMerkleWrapper",
			Handler:       _ChainBroker_SyncMerkleWrapper_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMerkleWrapper",
			Handler:       _ChainBroker_GetMerkleWrapper_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "broker.proto",
}

func (m *GetMerkleWrapperRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMerkleWrapperRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetMerkleWrapperRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pid) > 0 {
		i -= len(m.Pid)
		copy(dAtA[i:], m.Pid)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Pid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.End != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x10
	}
	if m.Begin != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.Begin))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionHashMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionHashMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionHashMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendTransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x42
	}
	if m.Nonce != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x38
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBroker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Timestamp != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.To.Size()
		i -= size
		if _, err := m.To.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBroker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.From.Size()
		i -= size
		if _, err := m.From.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBroker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncMerkleWrapperRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncMerkleWrapperRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncMerkleWrapperRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AppchainId) > 0 {
		i -= len(m.AppchainId)
		copy(dAtA[i:], m.AppchainId)
		i = encodeVarintBroker(dAtA, i, uint64(len(m.AppchainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBlocksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlocksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlocksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Length != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetBlocksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlocksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlocksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBroker(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SubscriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintBroker(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TxMeta != nil {
		{
			size, err := m.TxMeta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBroker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBroker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBroker(dAtA []byte, offset int, v uint64) int {
	offset -= sovBroker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetMerkleWrapperRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Begin != 0 {
		n += 1 + sovBroker(uint64(m.Begin))
	}
	if m.End != 0 {
		n += 1 + sovBroker(uint64(m.End))
	}
	l = len(m.Pid)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransactionHashMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovBroker(uint64(m.Type))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = m.From.Size()
	n += 1 + l + sovBroker(uint64(l))
	l = m.To.Size()
	n += 1 + l + sovBroker(uint64(l))
	if m.Timestamp != 0 {
		n += 1 + sovBroker(uint64(m.Timestamp))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovBroker(uint64(m.Nonce))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncMerkleWrapperRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppchainId)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBlocksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovBroker(uint64(m.Offset))
	}
	if m.Length != 0 {
		n += 1 + sovBroker(uint64(m.Length))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetBlocksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovBroker(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovBroker(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.TxMeta != nil {
		l = m.TxMeta.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBroker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBroker(x uint64) (n int) {
	return sovBroker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetMerkleWrapperRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMerkleWrapperRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMerkleWrapperRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionHashMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionHashMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionHashMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= GetBlockRequest_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = append(m.Version[:0], dAtA[iNdEx:postIndex]...)
			if m.Version == nil {
				m.Version = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &TransactionData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncMerkleWrapperRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncMerkleWrapperRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncMerkleWrapperRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppchainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppchainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlocksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlocksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlocksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlocksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlocksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlocksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &Block{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SubscriptionRequest_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &Transaction{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBroker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxMeta == nil {
				m.TxMeta = &TransactionMeta{}
			}
			if err := m.TxMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBroker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBroker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBroker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBroker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBroker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBroker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBroker = fmt.Errorf("proto: unexpected end of group")
)
